/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/azuredisk-csi-driver/pkg/apis/azuredisk/v1alpha1"
)

// AzVolumeOperationLister helps list AzVolumeOperations.
// All objects returned here must be treated as read-only.
type AzVolumeOperationLister interface {
	// List lists all AzVolumeOperations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzVolumeOperation, err error)
	// AzVolumeOperations returns an object that can list and get AzVolumeOperations.
	AzVolumeOperations(namespace string) AzVolumeOperationNamespaceLister
	AzVolumeOperationListerExpansion
}

// azVolumeOperationLister implements the AzVolumeOperationLister interface.
type azVolumeOperationLister struct {
	indexer cache.Indexer
}

// NewAzVolumeOperationLister returns a new AzVolumeOperationLister.
func NewAzVolumeOperationLister(indexer cache.Indexer) AzVolumeOperationLister {
	return &azVolumeOperationLister{indexer: indexer}
}

// List lists all AzVolumeOperations in the indexer.
func (s *azVolumeOperationLister) List(selector labels.Selector) (ret []*v1alpha1.AzVolumeOperation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzVolumeOperation))
	})
	return ret, err
}

// AzVolumeOperations returns an object that can list and get AzVolumeOperations.
func (s *azVolumeOperationLister) AzVolumeOperations(namespace string) AzVolumeOperationNamespaceLister {
	return azVolumeOperationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzVolumeOperationNamespaceLister helps list and get AzVolumeOperations.
// All objects returned here must be treated as read-only.
type AzVolumeOperationNamespaceLister interface {
	// List lists all AzVolumeOperations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AzVolumeOperation, err error)
	// Get retrieves the AzVolumeOperation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AzVolumeOperation, error)
	AzVolumeOperationNamespaceListerExpansion
}

// azVolumeOperationNamespaceLister implements the AzVolumeOperationNamespaceLister
// interface.
type azVolumeOperationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzVolumeOperations in the indexer for a given namespace.
func (s azVolumeOperationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzVolumeOperation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzVolumeOperation))
	})
	return ret, err
}

// Get retrieves the AzVolumeOperation from the indexer for a given namespace and name.
func (s azVolumeOperationNamespaceLister) Get(name string) (*v1alpha1.AzVolumeOperation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azvolumeoperation"), name)
	}
	return obj.(*v1alpha1.AzVolumeOperation), nil
}
